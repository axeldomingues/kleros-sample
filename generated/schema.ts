// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Period extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Period entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Period entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Period", id.toString(), this);
  }

  static load(id: string): Period | null {
    return store.get("Period", id) as Period | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get period(): i32 {
    let value = this.get("period");
    return value.toI32();
  }

  set period(value: i32) {
    this.set("period", Value.fromI32(value));
  }

  get totalDisputes(): BigInt {
    let value = this.get("totalDisputes");
    return value.toBigInt();
  }

  set totalDisputes(value: BigInt) {
    this.set("totalDisputes", Value.fromBigInt(value));
  }

  get disputes(): Array<string> | null {
    let value = this.get("disputes");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set disputes(value: Array<string> | null) {
    if (value === null) {
      this.unset("disputes");
    } else {
      this.set("disputes", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Dispute extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Dispute entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Dispute entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Dispute", id.toString(), this);
  }

  static load(id: string): Dispute | null {
    return store.get("Dispute", id) as Dispute | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get period(): string {
    let value = this.get("period");
    return value.toString();
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }
}
